{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "Lab 4, Wordpress with Multi-AZ RDS",
    "Parameters": {
        "KeyName": {
            "Description": "Name of an existing EC2 KeyPair to enable SSH access",
            "Type": "String",
            "MinLength": "1",
            "MaxLength": "64",
            "AllowedPattern": "[-_ a-zA-Z0-9]*",
	    "Default" : "mykeypair",
            "ConstraintDescription": "Can contain only alphanumeric characters, spaces, dashes and underscores."
        },
        "InstanceTag": {
            "Description": "Enter a name tag to help identify your WordPress EC2 instance later",
            "Type": "String",
            "Default": "WPMultiAZ"
        }
    },
    "Mappings": {
        "AMZNAMI": {
            "us-east-1": {
                "AMI": "ami-05355a6c"
            },
            "us-west-2": {
                "AMI": "ami-ecbe2adc"
            },
            "us-west-1": {
                "AMI": "ami-66d1fc23"
            },
            "eu-west-1": {
                "AMI": "ami-44939930"
            },
            "ap-southeast-1": {
                "AMI": "ami-aa9ed2f8"
            },
            "ap-southeast-2": {
                "AMI": "ami-363eaf0c"
            },
            "ap-northeast-1": {
                "AMI": "ami-173fbf16"
            },
            "sa-east-1": {
                "AMI": "ami-dd6bb0c0"
            }
        },


        "AWSInstanceType2Arch": {
            "t1.micro": {
                "Arch": "64"
            },
            "m1.small": {
                "Arch": "64"
            },
            "m1.medium": {
                "Arch": "64"
            },
            "m1.large": {
                "Arch": "64"
            },
            "m1.xlarge": {
                "Arch": "64"
            },
            "m2.xlarge": {
                "Arch": "64"
            },
            "m2.2xlarge": {
                "Arch": "64"
            },
            "m2.4xlarge": {
                "Arch": "64"
            },
            "m3.xlarge": {
                "Arch": "64"
            },
            "m3.2xlarge": {
                "Arch": "64"
            },
            "c1.medium": {
                "Arch": "64"
            },
            "c1.xlarge": {
                "Arch": "64"
            },
            "cc1.4xlarge": {
                "Arch": "64Cluster"
            },
            "cc2.8xlarge": {
                "Arch": "64Cluster"
            },
            "cg1.4xlarge": {
                "Arch": "64GPU"
            }
        },
        "AWSRegionArch2AMI": {
            "us-east-1": {
                "32": "ami-a0cd60c9",
                "64": "ami-aecd60c7",
                "64Cluster": "ami-a8cd60c1",
                "64GPU": "ami-eccf6285"
            },
            "us-west-2": {
                "32": "ami-46da5576",
                "64": "ami-48da5578",
                "64Cluster": "NOT_YET_SUPPORTED",
                "64GPU": "NOT_YET_SUPPORTED"
            },
            "us-west-1": {
                "32": "ami-7d4c6938",
                "64": "ami-734c6936",
                "64Cluster": "NOT_YET_SUPPORTED",
                "64GPU": "NOT_YET_SUPPORTED"
            },
            "eu-west-1": {
                "32": "ami-61555115",
                "64": "ami-6d555119",
                "64Cluster": "ami-67555113",
                "64GPU": "NOT_YET_SUPPORTED"
            },
            "ap-southeast-1": {
                "32": "ami-220b4a70",
                "64": "ami-3c0b4a6e",
                "64Cluster": "NOT_YET_SUPPORTED",
                "64GPU": "NOT_YET_SUPPORTED"
            },
            "ap-southeast-2": {
                "32": "ami-b3990e89",
                "64": "ami-bd990e87",
                "64Cluster": "NOT_YET_SUPPORTED",
                "64GPU": "NOT_YET_SUPPORTED"
            },
            "ap-northeast-1": {
                "32": "ami-2a19aa2b",
                "64": "ami-2819aa29",
                "64Cluster": "NOT_YET_SUPPORTED",
                "64GPU": "NOT_YET_SUPPORTED"
            },
            "sa-east-1": {
                "32": "ami-f836e8e5",
                "64": "ami-fe36e8e3",
                "64Cluster": "NOT_YET_SUPPORTED",
                "64GPU": "NOT_YET_SUPPORTED"
            }
        },
        "SubnetConfig": {
            "VPC": {
                "CIDR": "10.0.0.0/16"
            },
            "PublicSubnet1": {
                "CIDR": "10.0.0.0/24"
            },
            "PublicSubnet2": {
                "CIDR": "10.0.2.0/24"
            },
            "PrivateSubnet1": {
                "CIDR": "10.0.1.0/24"
            },
            "PrivateSubnet2": {
                "CIDR": "10.0.3.0/24"
            }
        }
    },
    "Resources": {
        "VPC": {
            "Type": "AWS::EC2::VPC",
            "Properties": {
                "CidrBlock": {
                    "Fn::FindInMap": [
                        "SubnetConfig",
                        "VPC",
                        "CIDR"
                    ]
                },
                "Tags": [
                    {
                        "Key": "Application",
                        "Value": {
                            "Ref": "AWS::StackId"
                        }
                    },
                    {
                        "Key": "Network",
                        "Value": "Public"
                    }
                ]
            }
        },
        "InternetGateway": {
            "Type": "AWS::EC2::InternetGateway",
            "Properties": {
                "Tags": [
                    {
                        "Key": "Application",
                        "Value": {
                            "Ref": "AWS::StackId"
                        }
                    },
                    {
                        "Key": "Network",
                        "Value": "Public"
                    }
                ]
            }
        },
        "GatewayToInternet": {
            "Type": "AWS::EC2::VPCGatewayAttachment",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "InternetGatewayId": {
                    "Ref": "InternetGateway"
                }
            }
        },
        "PublicSubnet1": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "CidrBlock": {
                    "Fn::FindInMap": [
                        "SubnetConfig",
                        "PublicSubnet1",
                        "CIDR"
                    ]
                },
        "AvailabilityZone" : { "Fn::Select" : 
					[
						"0",
						{ "Fn::GetAZs" : ""}


					]

		},
                "Tags": [
                    {
                        "Key": "Application",
                        "Value": {
                            "Ref": "AWS::StackId"
                        }
                    },
                    {
                        "Key": "Network",
                        "Value": "Public"
                    }
                ]
            }
        },
        "PublicSubnet2": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "CidrBlock": {
                    "Fn::FindInMap": [
                        "SubnetConfig",
                        "PublicSubnet2",
                        "CIDR"
                    ]
                },
		"AvailabilityZone" : { "Fn::Select" : 
					[
						"1",
						{ "Fn::GetAZs" : ""}


					]

		},

                "Tags": [
                    {
                        "Key": "Application",
                        "Value": {
                            "Ref": "AWS::StackId"
                        }
                    },
                    {
                        "Key": "Network",
                        "Value": "Public"
                    }
                ]
            }
        },
        "PublicRouteTable": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "Tags": [
                    {
                        "Key": "Application",
                        "Value": {
                            "Ref": "AWS::StackId"
                        }
                    },
                    {
                        "Key": "Network",
                        "Value": "Public"
                    }
                ]
            }
        },
        "PublicRoute": {
            "Type": "AWS::EC2::Route",
            "DependsOn": "GatewayToInternet",
            "Properties": {
                "RouteTableId": {
                    "Ref": "PublicRouteTable"
                },
                "DestinationCidrBlock": "0.0.0.0/0",
                "GatewayId": {
                    "Ref": "InternetGateway"
                }
            }
        },
        "PublicSubnet1RouteTableAssociation": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "PublicSubnet1"
                },
                "RouteTableId": {
                    "Ref": "PublicRouteTable"
                }
            }
        },
        "PublicSubnet2RouteTableAssociation": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "PublicSubnet2"
                },
                "RouteTableId": {
                    "Ref": "PublicRouteTable"
                }
            }
        },
        "PrivateSubnet1": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "CidrBlock": {
                    "Fn::FindInMap": [
                        "SubnetConfig",
                        "PrivateSubnet1",
                        "CIDR"
                    ]
                },
		"AvailabilityZone" : { "Fn::Select" : [ "0" , { "Fn::GetAZs" : ""} ]},
                "Tags": [
                    {
                        "Key": "Application",
                        "Value": {
                            "Ref": "AWS::StackId"
                        }
                    },
                    {
                        "Key": "Network",
                        "Value": "Private"
                    }
                ]
            }
        },

        "PrivateSubnet2": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "CidrBlock": {
                    "Fn::FindInMap": [
                        "SubnetConfig",
                        "PrivateSubnet2",
                        "CIDR"
                    ]
                },
                "AvailabilityZone" : { "Fn::Select" : [ "1" , { "Fn::GetAZs" : ""} ]},
                "Tags": [
                    {
                        "Key": "Application",
                        "Value": {
                            "Ref": "AWS::StackId"
                        }
                    },
                    {
                        "Key": "Network",
                        "Value": "Private"
                    }
                ]
            }
        },


        "PrivateRouteTable": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "Tags": [
                    {
                        "Key": "Application",
                        "Value": {
                            "Ref": "AWS::StackId"
                        }
                    },
                    {
                        "Key": "Network",
                        "Value": "Private"
                    }
                ]
            }
        },
        "PrivateSubnet1RouteTableAssociation": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "PrivateSubnet1"
                },
                "RouteTableId": {
                    "Ref": "PrivateRouteTable"
                }
            }
        },

        "PrivateSubnet2RouteTableAssociation": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "PrivateSubnet2"
                },
                "RouteTableId": {
                    "Ref": "PrivateRouteTable"
                }
            }
        },

        "CPUAlarmHigh": {
            "Properties": {
                "EvaluationPeriods": "1",
                "Statistic": "Average",
                "Threshold": "50",
                "AlarmDescription": "Scale-up if CPU > 50% for 300 seconds or if data missing",
                "Period": "300",
                "AlarmActions": [
                    {
                        "Ref": "WebServerScaleUpPolicy"
                    }
                ],
                "Namespace": "AWS/EC2",
                "InsufficientDataActions": [
                    {
                        "Ref": "WebServerScaleUpPolicy"
                    }
                ],
                "Dimensions": [
                    {
                        "Name": "AutoScalingGroupName",
                        "Value": {
                            "Ref": "WebServerGroup"
                        }
                    }
                ],
                "ComparisonOperator": "GreaterThanThreshold",
                "MetricName": "CPUUtilization"
            },
            "Type": "AWS::CloudWatch::Alarm"
        },
    "WebServerScaleUpPolicy" : {
      "Type" : "AWS::AutoScaling::ScalingPolicy",
      "Properties" : {
        "AdjustmentType" : "ChangeInCapacity",
        "AutoScalingGroupName" : { "Ref" : "WebServerGroup" },
        "Cooldown" : "60",
        "ScalingAdjustment" : "2"
      }
    },        



        "EC2SecurityGroup": {
            "Properties": {
                "SecurityGroupIngress": [		    
                    {
                        "FromPort": "80",
                        "CidrIp": "0.0.0.0/0",
                        "ToPort": "80",
                        "IpProtocol": "tcp"
                    }
                ],
	        "VpcId" : { "Ref" : "VPC" },
                "GroupDescription": "HTTPaccess"
            },
            "Type": "AWS::EC2::SecurityGroup"
        },
        "ElasticLoadBalancer": {
            "Properties": {
                "Listeners": [
                    {
                        "InstancePort": "80",
                        "PolicyNames": [
                            "p1"
                        ],
                        "Protocol": "HTTP",
                        "LoadBalancerPort": "80"
                    }
                ],
                "HealthCheck": {
                    "HealthyThreshold": "2",
                    "Timeout": "5",
                    "Interval": "10",
                    "UnhealthyThreshold": "5",
                    "Target": {
                        "Fn::Join": [
                            "",
                            [
                                "HTTP:",
                                "80",
                                "/wordpress/wp-admin/install.php"
                            ]
                        ]
                    }
                },
                "Subnets": [{ "Ref" : "PublicSubnet1" },{ "Ref" : "PublicSubnet2"}],
		"SecurityGroups" : [{ "Ref" : "EC2SecurityGroup" }],
                "LBCookieStickinessPolicy": [
                    {
                        "CookieExpirationPeriod": "30",
                        "PolicyName": "p1"
                    }
                ]
            },
            "Type": "AWS::ElasticLoadBalancing::LoadBalancer"
        },
        "DBSecurityGroup": {
            "Properties": {
                "SecurityGroupIngress": [
                    {
                        "FromPort": "3306",
                        "CidrIp": "0.0.0.0/0",
                        "ToPort": "3306",
                        "IpProtocol": "tcp"
                    }
                ],
	        "VpcId" : { "Ref" : "VPC" },
                "GroupDescription": "MySQL access"
            },
            "Type": "AWS::EC2::SecurityGroup"
        },

	"DBSubnetGroup" : {
	    "Type" : "AWS::RDS::DBSubnetGroup",
	    "Properties" : {
	        "DBSubnetGroupDescription" : "Subnets for the DB",
		"SubnetIds" : [ { "Ref" : "PrivateSubnet1" }, { "Ref" : "PrivateSubnet2" } ]
	    }
	},
        
        "DBInstance": {
            "Properties": {
                "Engine": "MySQL",
                "DBName": "wordpress",
                "Port": "3306",
                "MultiAZ": "true",
                "MasterUsername": "reInvent",
                "DBInstanceClass": "db.m1.medium",
                "VPCSecurityGroups": [ { "Ref": "DBSecurityGroup" } ],
		"DBSubnetGroupName" : { "Ref" : "DBSubnetGroup" },
                "AllocatedStorage": "5",
                "MasterUserPassword": "reInvent"
            },
            "Type": "AWS::RDS::DBInstance"
        },
        "WebServerGroup": {
            "Properties": {
                "LoadBalancerNames": [
                    {
                        "Ref": "ElasticLoadBalancer"
                    }
                ],
                "LaunchConfigurationName": {
                    "Ref": "LaunchConfig"
                },
                "AvailabilityZones": [{ "Fn::GetAtt" : [ "PublicSubnet1", "AvailabilityZone" ] },{ "Fn::GetAtt" : [ "PublicSubnet2", "AvailabilityZone" ] }],
                "VPCZoneIdentifier": [{ "Ref" : "PublicSubnet1" },{ "Ref" : "PublicSubnet2" }],
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Ref": "InstanceTag"
                        },
                        "PropagateAtLaunch": "true"
                    }
                ],
                "MinSize": "2",
                "MaxSize": "4",
                "DesiredCapacity": "2"
            },
            "Type": "AWS::AutoScaling::AutoScalingGroup"
        },
        "RolePolicies": {
            "Type": "AWS::IAM::Policy",
            "Properties": {
                "PolicyName": "root",
                "PolicyDocument": {
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Action": "dynamodb:*",
                            "Resource": "*"
                        }
                    ]
                },
                "Roles": [
                    {
                        "Ref": "RootRole"
                    }
                ]
            }
        },
        "RootRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "ec2.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Path": "/"
            }
        },
        "RootInstanceProfile": {
            "Type": "AWS::IAM::InstanceProfile",
            "Properties": {
                "Path": "/",
                "Roles": [
                    {
                        "Ref": "RootRole"
                    }
                ]
            }
        },
        "CfnUser": {
            "Type": "AWS::IAM::User",
            "Properties": {
                "Path": "/",
                "Policies": [
                    {
                        "PolicyName": "root",
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": "cloudformation:DescribeStackResource",
                                    "Resource": "*"
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "HostKeys": {
            "Type": "AWS::IAM::AccessKey",
            "Properties": {
                "UserName": {
                    "Ref": "CfnUser"
                }
            }
        },
        "LaunchConfig": {
            "Metadata": {
                "AWS::CloudFormation::Init": {
                    "config": {
                        "packages": {
                            "yum": {
                                "httpd": [],
                                "php": [],
                                "php-xml": [],
                                "php-ldap": [],
                                "php-mysql": []
                            }
                        },
                        "sources": {
                            "/var/www/html/": "https://s3.amazonaws.com/bootcamp03/public/wordpress_dynamo_361.zip",
                            "/opt/aws": "https://s3.amazonaws.com/bootcamp03/public/sdk-1.5.14.zip"
                        },
                        "files": {
                            "/var/www/html/wordpress/wp-config.php": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "<?php\n",
                                            "define('DB_NAME',          'wordpress');\n",
                                            "define('DB_USER',          'reInvent');\n",
                                            "define('DB_PASSWORD',      'reInvent');\n",
                                            "define('DB_HOST',          '",
                                            {
                                                "Fn::GetAtt": [
                                                    "DBInstance",
                                                    "Endpoint.Address"
                                                ]
                                            },
                                            "');\n",
                                            "define('DB_CHARSET',       'utf8');\n",
                                            "define('DB_COLLATE',       '');\n",
                                            "define('AUTH_KEY',         'f@A17vs{ mO0}:&I,6SB.QzV`E?!`/tN5:~GZX%=@ZA%!_T0-]9>g]4ll6~,6G|R');\n",
                                            "define('SECURE_AUTH_KEY',  'gTFTI|~rYHY)|mlu:Cv7RN]GQ^3ngyUbw;L0o!12]0c-ispR<-yt3qj]xjquz^&9');\n",
                                            "define('LOGGED_IN_KEY',    'Jd:HG9M)1p5t2<v~+R-vd{p-Q*|*RB^&PUI{vIrydAEEiV!{HS{jN:nErCmLv`p}');\n",
                                            "define('NONCE_KEY',        '4aMj4KZV;,Gu7(B|qOCve[c5?*J5x1+x93i:Ey6hh/6jXh+V_{V4+hw!qE^d*U,-');\n",
                                            "define('AUTH_SALT',        '_Y_&8m)FH)Cns)8}Yb8b88KDSn:p1#p(qBa<~VW&Y1v}P.*9/8S8@P`{mkNxV lC');\n",
                                            "define('SECURE_AUTH_SALT', '%nG3Ag41^Lew5c86,#zbN:yPFs.GA5a)z5*:Oce1>v6uF~D`,.o1pzS)F8[bM9i[');\n",
                                            "define('LOGGED_IN_SALT',   '~K<y+Ly+_Ww1~dtq>;rSQ^+{P5/k|=!]k%RXAF-Y@XMY6GSp+wJ5{(|rCzaWjZ%/');\n",
                                            "define('NONCE_SALT',       ',Bs_*Y9:b/1Z:apVLHtz35uim|okkA,b|Jt[-&Nla=T{<l_#D?~6Tj-.2.]FonI~');\n",
                                            "define('WPLANG'            , '');\n",
                                            "define('WP_DEBUG'          , false);\n",
                                            "$table_prefix  = 'wp_';\n",
                                            "if ( !defined('ABSPATH') )\n",
                                            "    define('ABSPATH', dirname(__FILE__) . '/');\n",
                                            "require_once(ABSPATH . 'wp-settings.php');\n"
                                        ]
                                    ]
                                },
                                "mode": "000644",
                                "owner": "root",
                                "group": "root"
                            },
                            "/var/www/html/wordpress/region.php" : {
                                "content" : {
                                    "Fn::Join" : [
                                        "",
                                        [
                                        "<?php\n",
                                        "$dynamodb_region=\"dynamodb.", { "Ref" : "AWS::Region" },".amazonaws.com\";\n",
                                        "?>"                                            
                                        ]                                                                                                            
                                    ]
                                },
                                "mode" : "000644",
                                "owner" : "root",
                                "group" : "root"
                            }
                        },
                        "services": {
                            "sysvinit": {
                                "httpd": {
                                    "enabled": "true",
                                    "ensureRunning": "true"
                                },
                                "sendmail": {
                                    "enabled": "false",
                                    "ensureRunning": "false"
                                }
                            }
                        }
                    }
                }
            },
            "Properties": {
		"AssociatePublicIpAddress" : "true",
                "SecurityGroups": [
                    {
                        "Ref": "EC2SecurityGroup"
                    }
                ],
                "IamInstanceProfile": {
                    "Ref": "RootInstanceProfile"
                },
                "ImageId": { "Fn::FindInMap" : [ "AMZNAMI", { "Ref": "AWS::Region" }, "AMI"] },
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/bash\n",
                                "yum update -y aws-cfn-bootstrap\n",
                                "/opt/aws/bin/cfn-init -s ",
                                {
                                    "Ref": "AWS::StackName"
                                },
                                " -r LaunchConfig ",
                                "         --access-key ",
                                {
                                    "Ref": "HostKeys"
                                },
                                "         --secret-key ",
                                {
                                    "Fn::GetAtt": [
                                        "HostKeys",
                                        "SecretAccessKey"
                                    ]
                                },
                                "         --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "\n",
                                "wget -P /var/www/html/wordpress/wp-content/plugins/ http://s3.amazonaws.com/bootcamp03/public/wordpress-importer.0.6.1.zip\n",
                                "wget -P /var/www/html/wordpress/wp-content/plugins/ http://s3.amazonaws.com/bootcamp03/public/tantan-s3-cloudfront.0.4.1.1.zip\n",
                                "wget -P /var/www/html/wordpress/wp-content/plugins/ http://s3.amazonaws.com/bootcamp03/public/simple-ldap-login.1.5.4.zip\n",
                                "cd /var/www/html/wordpress/wp-content\n",
                                "chmod 777 plugins\n",
                                "cd /var/www/html/wordpress/wp-content/plugins\n",
                                "chmod 777 wordpress-importer.0.6.1.zip\n",
                                "chmod 777 tantan-s3-cloudfront.0.4.1.1.zip\n",
                                "chmod 777 simple-ldap-login.1.5.4.zip\n",
                                "unzip wordpress-importer.0.6.1.zip\n",
                                "unzip tantan-s3-cloudfront.0.4.1.1.zip\n",
                                "unzip simple-ldap-login.1.5.4.zip\n",
                                "cd /var/www/html/wordpress/wp-content\n",
                                "chmod 755 plugins\n",
                                "# Setup correct file ownership\n",
                                "chown -R apache:apache /var/www/html/wordpress\n",
                                "mkdir /tmp/cache\n",
                                "chmod 777 /tmp/cache\n"
                            ]
                        ]
                    }
                },
                "KeyName": { "Ref": "KeyName" },
                "InstanceType": "m1.small"
            },
            "Type": "AWS::AutoScaling::LaunchConfiguration"
        }
    },
    "Outputs": {
        "URL": {
            "Value": {
                "Fn::Join": [
                    "",
                    [
                        "http://",
                        {
                            "Fn::GetAtt": [
                                "ElasticLoadBalancer",
                                "DNSName"
                            ]
                        },
                        "/wordpress/wp-admin/install.php"
                    ]
                ]
            },
            "Description": "Lab 4: Wordpress with Multi-AZ RDS"
        }
    }
}
